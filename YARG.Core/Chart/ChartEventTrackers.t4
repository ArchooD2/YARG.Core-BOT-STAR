<#@ template hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Collections.Generic;

#nullable enable

namespace YARG.Core.Chart
{
<#
var types = new (string upper, string lower, string type)[] {
    ("Tick", "tick", "uint"),
    ("Time", "time", "double"),
};

foreach (var (upper, lower, type) in types)
{
#>
    /// <summary>
    /// Tracks the current event of an event list across <#= lower #>s.
    /// </summary>
    public class ChartEvent<#= upper #>Tracker<TEvent>
        where TEvent : ChartEvent
    {
        private List<TEvent> _events;
        private int _eventIndex = 0;

        public TEvent Current => _events[_eventIndex];
        public int CurrentIndex => _eventIndex;

        public ChartEvent<#= upper #>Tracker(List<TEvent> events)
        {
            _events = events;
        }

        /// <summary>
        /// Updates the state of the event tracker to the given <#= lower #>.
        /// </summary>
        /// <returns>
        /// True if a new event has been reached, false otherwise.
        /// </returns>
        public bool Update(<#= type #> <#= lower #>)
        {
            int previousIndex = _eventIndex;
            while (_eventIndex + 1 < _events.Count && _events[_eventIndex + 1].<#= upper #> < <#= lower #>)
                _eventIndex++;
            return previousIndex != _eventIndex;
        }

        /// <summary>
        /// Updates the state of the event tracker to the given <#= lower #> by a single event.
        /// </summary>
        /// <returns>
        /// True if a new event has been reached, false otherwise.
        /// </returns>
        public bool UpdateOnce(<#= type #> <#= lower #>)
        {
            if (_eventIndex + 1 < _events.Count && _events[_eventIndex + 1].<#= upper #> < <#= lower #>)
            {
                _eventIndex++;
                return true;
            }

            return false;
        }

        /// <summary>
        /// Resets the state of the event tracker to the given <#= lower #>.
        /// </summary>
        public void ResetTo<#= upper #>(<#= type #> <#= lower #>)
        {
            _eventIndex = _events.GetIndexOfPrevious(<#= lower #>);
            if (_eventIndex < 0)
                _eventIndex = 0;
        }
    }

<#
}
#>
}